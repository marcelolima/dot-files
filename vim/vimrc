set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'majutsushi/tagbar'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'Raimondi/delimitMate'
Plugin 'vim-scripts/leo256'
Plugin 'fs111/pydoc.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/syntastic'
Plugin 'nsf/gocode', {'rtp': 'vim/'}
Plugin 'Valloric/YouCompleteMe.git'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'w0ng/vim-hybrid'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Yggdroot/indentLine'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'mxw/vim-jsx'
Plugin 'epmatsw/ag.vim'

call vundle#end()
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""" GENERAL SETTINGS """""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set <leader> hotkey as space
let mapleader = " "

" Show line number
set number

" Set history
set history=1000

" Set utf8 as standard encoding and en_US as the standard language:
set encoding=utf8

" Set colorscheme
set background=dark
colorscheme hybrid

" Enable mouse:
set mouse=a

" Default settings (PEP8)
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set fileformat=unix
let python_highlight_all=1

" toggle between modes almost instantly
set ttimeoutlen=0

" update file edited outside vim
set autoread

" Show white line in cursor
set cursorline
hi CursorLine ctermbg=235
hi CursorLineNr ctermfg=yellow

" Set ColorColumn
set cc=80
hi ColorColumn ctermbg=235

" Set String background null
hi String ctermbg=None

" set the terminal title to the current file
set title

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"Lowercase = case insensitive, any uppercase = case sensitive:
set smartcase

" Highlight search results:
set hlsearch
hi Search cterm=NONE ctermfg=grey ctermbg=blue

" show search results as you type
set incsearch

" Show matching brackets when text indicator is over them:
set showmatch

" Smart tab
set smarttab

" Jump to last position on re-open
au BufReadPost * if &ft != "gitcommit" && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" show options in command mode pressing tab
set wildmenu

" No annoying sound on errors
set noerrorbells
set novisualbell
set tm=500

" Turn backup off
set nobackup
set nowb
set noswapfile

" Map :noh command to F3
map <F3> :noh<CR>
map! <F3> <Esc>:noh<CR>i

" reload all opened files pressing F5
nmap <F5> :tabdo windo edit<CR>

" keeps a menu item always highlighted
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Autoreload .vimrc on save
augroup AutoReloadVimRC
	au!
	" automatically reload vimrc when it's saved
	au BufWritePost $MYVIMRC so $MYVIMRC
augroup END

" tabs
map <leader>t gt
map <leader>T gT
map <leader>1 1gt
map <leader>2 2gt
map <leader>3 3gt
map <leader>4 4gt
map <leader>5 5gt
map <leader>6 6gt
map <leader>7 7gt
map <leader>8 8gt
map <leader>9 9gt
map <leader>0 :tablast<CR>]

syntax on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""" Syntastic """""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_javascript_checkers = ['eslint']
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""" GO SETTINGS """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" syntax-highlighting for Functions, Methods and Structs is disabled.
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Enable goimports to automatically insert import paths instead of gofmt:
let g:go_fmt_command = "goimports"

" By default vim-go shows errors for the fmt command, to disable it:
let g:go_fmt_fail_silently = 1

" Mappings for fatih/vim-go
au FileType go nmap <leader>r :w<cr>:GoRun<cr>
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""" UltiSnips """""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger = "<C-l>"

let g:UltiSnipsJumpForwardTrigger = "<C-k>"
let g:UltiSnipsJumpBackwardTrigger = "<C-j>"
let g:UltiSnipsEditSplit="vertical"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""" VirtualEnv Support """"""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:virtualenv_auto_activate = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""" Airline """""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_powerline_fonts = 1
let g:airline_theme = 'ubaryd'
set laststatus=2
set t_Co=256


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""" NerdTree """""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" show/hide NERDTree pressing F2
map <F2> :NERDTreeToggle<CR>

let NERDTreeIgnore=['\.pyc$', '\~$']


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""" CtrlP """"""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore files from .gitignore on ctrlp plugin
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" TagBar """"""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle tagbar with F8
nmap <F8> :TagbarToggle<CR>

" Set tags file directory: '.git/tags'
" set tags="$(git rev-parse --show-toplevel)/.git/tags"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""" identLine """""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indentLine_color_term = 236
let g:indentLine_enabled = 1
let g:indentLine_char = 'â”Š'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""" YouCompleteMe """""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" close autocomplete window
let g:ycm_autoclose_preview_window_after_completion=1

" Use the current python (should work for the virtualenv activated too).
let g:ycm_python_binary_path = 'python'

" shortcut for go to definition
map <leader>d  :YcmCompleter GoTo<CR>

" Open definition on new tab
let g:ycm_goto_buffer_command = 'new-or-existing-tab'
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""" ctags """""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"autocmd BufWritePost *.py,*.js silent! !eval 'ctags -R -o newtags; mv newtags tags'  2> /dev/null &
map <leader>t :tselect /^

" set multiple tags destionations
set tags+=.git/project_ctags
set tags+=.git/pythonlib_tags
"set tags+=.git/nodemodules_tags

" Open new buffer on new tab
:nnoremap <silent><Leader>c <C-w><C-]><C-w>T"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""" ack.vim / ag """""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ack_autoclose = 1
map <leader>g :Ag -Q ""
map ZX ZZ<CR>
map ZC ZQ<CR>
