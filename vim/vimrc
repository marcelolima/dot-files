set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'majutsushi/tagbar'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'Raimondi/delimitMate'
Plugin 'kevinw/pyflakes-vim'
Plugin 'vim-scripts/leo256'
Plugin 'fs111/pydoc.vim'
Plugin 'dkprice/vim-easygrep'
Plugin 'kien/ctrlp.vim'
Plugin 'nvie/vim-flake8'
Plugin 'fatih/vim-go'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/syntastic'
Plugin 'nsf/gocode', {'rtp': 'vim/'}
Plugin 'Valloric/YouCompleteMe.git'

call vundle#end()
filetype plugin indent on

" Tab and space config
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" Set colorscheme
set t_Co=256
colorscheme leo

" Vim-airline
set laststatus=2
let g:airline_theme = 'murmur'

syntax on
set autoindent
set history=1000

" Enable omni completion
"set omnifunc=syntaxcomplete#Complete
"set completeopt=longest,menuone

" toggle between modes almost instantly
set ttimeoutlen=0

" update file edited outside vim
set autoread

"autocmd BufWritePost *.py call Flake8()

" Show white line in cursor
set cursorline
hi CursorLine ctermbg=234
hi CursorLineNr ctermfg=yellow

" Set ColorColumn
set cc=81
hi ColorColumn ctermbg=235

" Set String background null
hi String ctermbg=None

" set the terminal title to the current file
set title

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"Lowercase = case insensitive, any uppercase = case sensitive:
set smartcase

" Highlight search results:
set hlsearch
hi Search cterm=NONE ctermfg=grey ctermbg=blue

" show search results as you type
set incsearch

" Show matching brackets when text indicator is over them:
set showmatch

" Smart tab
set smarttab
"set tabstop=4
"set shiftwidth=4

" Ignore files from .gitignore on ctrlp plugin
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Set utf8 as standard encoding and en_US as the standard language:
set encoding=utf8

" Enable mouse:
set mouse=a

" show options in command mode pressing tab
set wildmenu

" No annoying sound on errors
set noerrorbells
set novisualbell
set tm=500

" Turn backup off
set nobackup
set nowb
set noswapfile

" Set tags file directory: '.git/tags'
set tags="$(git rev-parse --show-toplevel)/.git/tags"

" Use C-f to search
map <C-f> /
map! <C-f> <Esc>/

" show/hide NERDTree pressing F2
map <F2> :NERDTreeToggle<CR>

" Map :noh command to F3
map <F3> :noh<CR>
map! <F3> <Esc>:noh<CR>i

" reload all opened files pressing F5
nmap <F5> :tabdo windo edit<CR>

" Toggle tagbar with F8
nmap <F8> :TagbarToggle<CR>

" Enter key will simply the highlighted menu item in omnicompletion
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" keeps a menu item always highlighted
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Autoreload .vimrc on save
augroup AutoReloadVimRC
	au!
	" automatically reload vimrc when it's saved
	au BufWritePost $MYVIMRC so $MYVIMRC
augroup END

" Show line number
set number          " show absolute line number for the current line

" Jump to last position on re-open
au BufReadPost * if &ft != "gitcommit" && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" GO SETTINGS
" syntax-highlighting for Functions, Methods and Structs is disabled. To change it:
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Enable goimports to automatically insert import paths instead of gofmt:
let g:go_fmt_command = "goimports"

" By default vim-go shows errors for the fmt command, to disable it:
let g:go_fmt_fail_silently = 1

au FileType go nmap <leader>r :w<cr>:GoRun<cr>
"<Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)

au FileType go nmap <Leader>i <Plug>(go-info)

let mapleader = " "
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

